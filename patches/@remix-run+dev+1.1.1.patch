diff --git a/node_modules/@remix-run/dev/compiler.js b/node_modules/@remix-run/dev/compiler.js
index 5dc3ee5..78ed712 100644
--- a/node_modules/@remix-run/dev/compiler.js
+++ b/node_modules/@remix-run/dev/compiler.js
@@ -28,8 +28,9 @@ var loaders = require('./compiler/loaders.js');
 var mdx = require('./compiler/plugins/mdx.js');
 var routes = require('./compiler/routes.js');
 var fs$1 = require('./compiler/utils/fs.js');
+var alias = require('esbuild-plugin-alias');
 
-function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }
+function _interopDefaultLegacy(e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }
 
 function _interopNamespace(e) {
   if (e && e.__esModule) return e;
@@ -182,11 +183,11 @@ async function watch(config$1, {
     }
 
     await Promise.all([// If we get here and can't call rebuild something went wrong and we
-    // should probably blow as it's not really recoverable.
-    browserBuild.rebuild().then(build => generateManifests(config$1, build.metafile)), serverBuild.rebuild()]).catch(err => {
-      disposeBuilders();
-      onBuildFailure(err);
-    });
+      // should probably blow as it's not really recoverable.
+      browserBuild.rebuild().then(build => generateManifests(config$1, build.metafile)), serverBuild.rebuild()]).catch(err => {
+        disposeBuilders();
+        onBuildFailure(err);
+      });
     if (onRebuildFinish) onRebuildFinish();
   }, 100);
   let watcher = chokidar__default["default"].watch(config$1.appDirectory, {
@@ -225,7 +226,7 @@ async function watch(config$1, {
     }
   });
   return async () => {
-    await watcher.close().catch(() => {});
+    await watcher.close().catch(() => { });
     disposeBuilders();
   };
 }
@@ -311,9 +312,16 @@ async function createBrowserBuild(config, options) {
     assetNames: "_assets/[name]-[hash]",
     publicPath: config.publicPath,
     define: {
-      "process.env.NODE_ENV": JSON.stringify(options.mode)
+      "process.env.NODE_ENV": JSON.stringify(options.mode),
+      "global": JSON.stringify({}),
+      "process.env.GUTENBERG_PHASE": 2
     },
-    plugins: [mdx.mdxPlugin(config), browserRouteModulesPlugin(config, /\?browser$/), emptyModulesPlugin(config, /\.server(\.[jt]sx?)?$/)]
+    plugins: [
+      alias({
+        '@prisma/client': require.resolve('@prisma/client'),
+      }),
+      mdx.mdxPlugin(config), browserRouteModulesPlugin(config, /\?browser$/), emptyModulesPlugin(config, /\.server(\.[jt]sx?)?$/)
+    ]
   });
 }
 
@@ -340,34 +348,39 @@ async function createServerBuild(config, options) {
     assetNames: "_assets/[name]-[hash]",
     publicPath: config.publicPath,
     define: {
-      "process.env.NODE_ENV": JSON.stringify(options.mode)
+      "process.env.NODE_ENV": JSON.stringify(options.mode),
+      "process.env.GUTENBERG_PHASE": 2
     },
-    plugins: [mdx.mdxPlugin(config), serverRouteModulesPlugin(config), emptyModulesPlugin(config, /\.client(\.[jt]sx?)?$/), manualExternalsPlugin((id, importer) => {
-      // assets.json is external because this build runs in parallel with the
-      // browser build and it's not there yet.
-      if (id === "./assets.json" && importer === "<stdin>") return true; // Mark all bare imports as external. They will be require()'d (or
-      // imported if ESM) at runtime from node_modules.
-
-      if (isBareModuleId(id)) {
-        let packageName = getNpmPackageName(id);
-
-        if (!/\bnode_modules\b/.test(importer) && !module$1.builtinModules.includes(packageName) && !dependencies$1.includes(packageName)) {
-          options.onWarning(`The path "${id}" is imported in ` + `${path__namespace.relative(process.cwd(), importer)} but ` + `${packageName} is not listed in your package.json dependencies. ` + `Did you forget to install it?`, packageName);
-        } // Include .css files from node_modules in the build so we can get a
-        // hashed file name to put into the HTML.
-
-
-        if (id.endsWith(".css")) return false; // Include "remix" in the build so the server runtime (node) doesn't
-        // have to try to find the magic exports at runtime. This essentially
-        // translates all `import x from "remix"` statements into `import x
-        // from "@remix-run/x"` in the build.
-
-        if (packageName === "remix") return false;
-        return true;
-      }
+    plugins: [
+      alias({
+        '@prisma/client': require.resolve('@prisma/client'),
+      }),
+      mdx.mdxPlugin(config), serverRouteModulesPlugin(config), emptyModulesPlugin(config, /\.client(\.[jt]sx?)?$/), manualExternalsPlugin((id, importer) => {
+        // assets.json is external because this build runs in parallel with the
+        // browser build and it's not there yet.
+        if (id === "./assets.json" && importer === "<stdin>") return true; // Mark all bare imports as external. They will be require()'d (or
+        // imported if ESM) at runtime from node_modules.
+
+        if (isBareModuleId(id)) {
+          let packageName = getNpmPackageName(id);
+
+          if (!/\bnode_modules\b/.test(importer) && !module$1.builtinModules.includes(packageName) && !dependencies$1.includes(packageName)) {
+            options.onWarning(`The path "${id}" is imported in ` + `${path__namespace.relative(process.cwd(), importer)} but ` + `${packageName} is not listed in your package.json dependencies. ` + `Did you forget to install it?`, packageName);
+          } // Include .css files from node_modules in the build so we can get a
+          // hashed file name to put into the HTML.
+
+
+          if (id.endsWith(".css")) return false; // Include "remix" in the build so the server runtime (node) doesn't
+          // have to try to find the magic exports at runtime. This essentially
+          // translates all `import x from "remix"` statements into `import x
+          // from "@remix-run/x"` in the build.
+
+          if (packageName === "remix") return false;
+          return true;
+        }
 
-      return false;
-    })]
+        return false;
+      })]
   });
 }
 
@@ -500,9 +513,9 @@ function emptyModulesPlugin(config, filter) {
         let resolved = path__namespace.resolve(args.resolveDir, args.path);
 
         if ( // Limit this behavior to modules found in only the `app` directory.
-        // This allows node_modules to use the `.server.js` and `.client.js`
-        // naming conventions with different semantics.
-        resolved.startsWith(config.appDirectory)) {
+          // This allows node_modules to use the `.server.js` and `.client.js`
+          // naming conventions with different semantics.
+          resolved.startsWith(config.appDirectory)) {
           return {
             path: args.path,
             namespace: "empty-module"
